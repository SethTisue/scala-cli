"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[508],{3905:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return d}});var n=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function r(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,l=function(e,t){if(null==e)return{};var a,n,l={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=n.createContext({}),o=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):r(r({},t),e)),a},p=function(e){var t=o(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,l=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=o(a),d=l,k=m["".concat(c,".").concat(d)]||m[d]||u[d]||i;return a?n.createElement(k,r(r({ref:t},p),{},{components:a})):n.createElement(k,r({ref:t},p))}));function d(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=a.length,r=new Array(i);r[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:l,r[1]=s;for(var o=2;o<i;o++)r[o]=a[o];return n.createElement.apply(null,r)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6752:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return r},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return o},default:function(){return u}});var n=a(7462),l=a(3366),i=(a(7294),a(3905)),r={title:"Input format",sidebar_position:3},s=void 0,c={unversionedId:"input",id:"input",isDocsHomePage:!1,title:"Input format",description:"The scala-cli CLI commands accept input in a number of ways, most notably:",source:"@site/docs/input.md",sourceDirName:".",slug:"/input",permalink:"/docs/input",editUrl:"https://github.com/Virtuslab/scala-cli/edit/master/website/docs/input.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Input format",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Installation",permalink:"/docs/installation"},next:{title:"Configuration",permalink:"/docs/configuration"}},o=[{value:"Scala files",id:"scala-files",children:[]},{value:"Directories",id:"directories",children:[]},{value:"URLs",id:"urls",children:[]},{value:"GitHub Gist",id:"github-gist",children:[]},{value:"Piping",id:"piping",children:[]},{value:"Process substitution",id:"process-substitution",children:[]},{value:"Scripts",id:"scripts",children:[{value:"Self executable Scala Script",id:"self-executable-scala-script",children:[]},{value:"Difference with Ammonite scripts",id:"difference-with-ammonite-scripts",children:[]}]}],p={toc:o};function u(e){var t=e.components,a=(0,l.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," CLI commands accept input in a number of ways, most notably:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"as ",(0,i.kt)("inlineCode",{parentName:"li"},".scala")," files"),(0,i.kt)("li",{parentName:"ul"},"as one or several directories, containing Scala sources"),(0,i.kt)("li",{parentName:"ul"},"as URLs, pointing to Scala sources"),(0,i.kt)("li",{parentName:"ul"},"by piping or process substitution")),(0,i.kt)("p",null,"Note that it accepts two kinds of Scala sources:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"standard ",(0,i.kt)("inlineCode",{parentName:"li"},".scala")," files"),(0,i.kt)("li",{parentName:"ul"},"scripts, ending in ",(0,i.kt)("inlineCode",{parentName:"li"},".sc"),", accepting any kind of top-level statement")),(0,i.kt)("p",null,"Java sources are also accepted."),(0,i.kt)("p",null,"Lastly, note that all these input formats can used alongside each other."),(0,i.kt)("h2",{id:"scala-files"},"Scala files"),(0,i.kt)("p",null,"This is the simplest input format. Just write a ",(0,i.kt)("inlineCode",{parentName:"p"},".scala")," file, and pass it to\n",(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," to run it:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Hello.scala"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object Hello {\n  def main(args: Array[String]): Unit =\n    println("Hello from Scala")\n}\n')),(0,i.kt)("p",null,"Run it with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli Hello.scala\n# Hello from Scala\n")),(0,i.kt)("p",null,"You can also split your code in multiple files, and pass all of them to ",(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," :"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Messages.scala"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object Messages {\n  def hello = "Hello from Scala"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Hello.scala"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Hello {\n  def main(args: Array[String]): Unit =\n    println(Messages.hello)\n}\n")),(0,i.kt)("p",null,"Run them with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli Hello.scala Messages.scala\n# Hello from Scala\n")),(0,i.kt)("p",null,"Passing many files this way can be cumbersome. Directories can help."),(0,i.kt)("h2",{id:"directories"},"Directories"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," accepts whole directories as input. This is convenient when you have many\n",(0,i.kt)("inlineCode",{parentName:"p"},".scala")," files, and passing them all one-by-one on the command line isn't practical:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-app/Messages.scala"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object Messages {\n  def hello = "Hello from Scala"\n}\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-app/Hello.scala"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},"object Hello {\n  def main(args: Array[String]): Unit =\n    println(Messages.hello)\n}\n")),(0,i.kt)("p",null,"Run them with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli my-app\n# Hello from Scala\n")),(0,i.kt)("h2",{id:"urls"},"URLs"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," accepts input via URLs pointing at ",(0,i.kt)("inlineCode",{parentName:"p"},".scala")," files.\nIt'll download and cache their content, and run them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli https://gist.github.com/alexarchambault/f972d941bc4a502d70267cfbbc4d6343/raw/2691c01984c9249936a625a42e29a822a357b0f6/Test.scala\n# Hello from Scala GitHub Gist\n")),(0,i.kt)("h2",{id:"github-gist"},"GitHub Gist"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," accepts input via Github Gists url.\nIt'll download gists zip archive, cache their content, and run them."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli https://gist.github.com/alexarchambault/7b4ec20c4033690dd750ffd601e540ec\n# Hello\n")),(0,i.kt)("h2",{id:"piping"},"Piping"),(0,i.kt)("p",null,"You can just pipe Scala code to ",(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," for execution:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"echo 'println(\"Hello\")' | scala-cli -\n# Hello\n")),(0,i.kt)("h2",{id:"process-substitution"},"Process substitution"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," accepts input via shell process substitution:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli <(echo 'println(\"Hello\")')\n# Hello\n")),(0,i.kt)("h2",{id:"scripts"},"Scripts"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," accept Scala scripts, ending in ",(0,i.kt)("inlineCode",{parentName:"p"},".sc"),". Unlike ",(0,i.kt)("inlineCode",{parentName:"p"},".scala")," files,\nany kind of statement is accepted at the top-level:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"hello.sc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'val message = "Hello from Scala script"\nprintln(message)\n')),(0,i.kt)("p",null,"Run it with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli hello.sc\n# Hello from Scala script\n")),(0,i.kt)("p",null,"In more detail, such a script is wrapped in an ",(0,i.kt)("inlineCode",{parentName:"p"},"object")," before being passed to\nthe Scala compiler, and a ",(0,i.kt)("inlineCode",{parentName:"p"},"main")," class is added to it. ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.sc")," is passed as"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'object hello {\n  val message = "Hello from Scala script"\n  println(message)\n\n  def main(args: Array[String]): Unit = ()\n}\n')),(0,i.kt)("p",null,"(reformatted for clarity)\nThe name ",(0,i.kt)("inlineCode",{parentName:"p"},"hello")," comes straight from the file name ",(0,i.kt)("inlineCode",{parentName:"p"},"hello.sc"),"."),(0,i.kt)("p",null,"When a script is in a sub-directory of a directory passed to ",(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," , a package is inferred too:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-app/constants/messages.sc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-scala"},'def hello = "Hello from Scala scripts"\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"my-app/main.sc"))),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"import constants.messages\nprintln(messages.hello)\n")),(0,i.kt)("p",null,"Run them with"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"scala-cli my-app --main-class main\n# Hello from Scala scripts\n")),(0,i.kt)("p",null,"Note that we pass an explicit main class. Both scripts automatically get a main class, so this\nis required to disambiguate them."),(0,i.kt)("h3",{id:"self-executable-scala-script"},"Self executable Scala Script"),(0,i.kt)("p",null,"You can define file with shebang header to self executable. It could be also run as a normal script."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},'cat HelloScript.sc\n# #!/usr/bin/env scala-cli\n# println("Hello world")\n\nscala-cli run HelloScript.sc\n# Hello world\nchmod +x HelloScript.sc\n./HelloScript.sc\n# Hello world\n')),(0,i.kt)("h3",{id:"difference-with-ammonite-scripts"},"Difference with Ammonite scripts"),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"http://ammonite.io"},"Ammonite")," is a popular REPL for Scala, that is also able to compile and run\n",(0,i.kt)("inlineCode",{parentName:"p"},".sc")," files."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"scala-cli")," and Ammonite differ significantly when your code is split in multiple scripts:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"in Ammonite, a script needs to use ",(0,i.kt)("inlineCode",{parentName:"li"},"import $file")," directives to use values defined in another script"),(0,i.kt)("li",{parentName:"ul"},"with ",(0,i.kt)("inlineCode",{parentName:"li"},"scala-cli")," , all scripts passed can reference each other, without such directives")),(0,i.kt)("p",null,"On the other hand,"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},'you can pass a single "entry point" script as input to Ammonite, and Ammonite finds the scripts\nit depends on via the ',(0,i.kt)("inlineCode",{parentName:"li"},"import $file")," directives"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"scala-cli")," requires all scripts to be passed beforehand, either one-by-one, or by putting them in a\ndirectory, and passing the directory to ",(0,i.kt)("inlineCode",{parentName:"li"},"scala-cli"))))}u.isMDXComponent=!0}}]);